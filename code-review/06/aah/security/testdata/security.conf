# test security config

security {
  auth_schemes {
    # HTTP Form Auth Scheme
    form_auth {
      scheme = "form"

      # Authenticator is used to validate the subject (aka User)
      authenticator = "security/Authentication"

      # Authorizer is used to get Subject authorization information,
      # such as Roles and Permissions
      authorizer = "security/Authorization"
    }

    basic_auth {
      scheme = "basic"

      realm_name = "Authentication Required"

      # basic auth file realm
      #file_realm = "path/to/file"

      # Authenticator is used to validate the subject (aka User)
      # if file realm is configured then `authenticator` is not used
      authenticator = "security/Authentication"

      # Authorizer is used to get Subject authorization information,
      # such as Roles and Permissions
      # if file realm is configured then `authorizer` is not used
      authorizer = "security/Authorization"
    }

    # Generic Auth Scheme
    # It is custom defined name, this is used in the routes `auth` attribute.
    generic_auth {
      # Auth scheme name.
      # Currently supported values are `form`, `basic` and `generic`.
      # It is required value, no default.
      scheme = "generic"

      # Framework calls `Authenticator` to get the Subject's authentication
      # information. The credential validation is not done by framework, it is
      # left interface implementation.
      # It is required value, no default.
      authenticator = "security/AuthenticationProvider"

      # Framework calls `Authorizer` to get Subject's authorization information,
      # such as Roles and Permissions. Then it populates the Subject instance.
      # It is required value, no default.
      authorizer = "security/AuthorizationProvider"

      # Header names are used to extract `AuthenticationToken` from request.
      header {
        # Default value is 'Authorization'
        #identity = "Authorization"

        # Optional credential header
        # Typically it's not used, however in the industry people do use it
        # Default value is empty string
        #credential = "X-AuthPass"
      }
    }
  }

  session {

  }

  password_encoder {
    # bcrypt algorithm
    #
    # Learn more:
    #   https://crackstation.net/hashing-security.htm
    #   https://security.stackexchange.com/a/6415
    #   https://en.wikipedia.org/wiki/Bcrypt
    bcrypt {
      # Default value is `true`
      enable = true

      # https://godoc.org/golang.org/x/crypto/bcrypt#pkg-constants
      # Default value is `12`.
      cost = 12
    }

    # scrypt algorithm
    #
    # Learn more:
    #   https://crackstation.net/hashing-security.htm
    #   https://pthree.org/2016/06/28/lets-talk-password-hashing/
    #   https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet
    # Default values are chosen carefully to provide secure password.
    scrypt {
      # Default value is `false`
      #enable = true

      # CPU/Memory Cost
      # Default value is `2^15`
      #cpu_memory_cost = 32768

      # Default value is `8`
      #block_size = 8

      # Default value is `1`
      #parallelization = 1

      # Default value is `32`
      #derived_key_length = 32

      # Default value is `24`
      #salt_length = 24
    }

    # pbkdf2 algorithm
    #
    # Learn more:
    #   https://crackstation.net/hashing-security.htm
    #   https://cryptosense.com/parameter-choice-for-pbkdf2/
    #   https://pthree.org/2016/06/28/lets-talk-password-hashing/
    #   https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet
    # Default values are chosen carefully to provide secure password.
    pbkdf2 {
      # Default value is `false`
      #enable = true

      # Default value is `10000`
      #iteration = 10000

      # Default value is `32`
      #derived_key_length = 32

      # Default value is `24`
      #salt_length = 24

      # Default value is `sha-512`
      #hash_algorithm = "sha-512"
    }
  }

  # --------------------------------------------------------------------
  # HTTP Secure Header(s)
  # Application of security headers with many safe defaults.
  # Typically non-empty config values included with appropriate
  # HTTP header in the response.
  #
  # Note: Secure Headers highly important to web application.
  #
  # Tip: Quick way to verify secure headers - https://securityheaders.io
  # --------------------------------------------------------------------
  http_header {
    # X-XSS-Protection
    # Designed to enable the cross-site scripting (XSS) filter built into modern
    # web browsers. This is usually enabled by default, but using it will enforce it.
    #
    # Learn more:
    #   https://www.owasp.org/index.php/OWASP_Secure_Headers_Project#xxxsp
    #   https://www.keycdn.com/blog/x-xss-protection/
    #
    # Encouraged to make use of header `Content-Security-Policy` with enhanced
    # policy to reduce XSS risk along with `X-XSS-Protection`.
    xxssp = "1; mode=block"

    # X-Content-Type-Options (XCTO)
    # Prevent Content Sniffing or MIME sniffing.
    #
    # Learn more:
    #   https://www.owasp.org/index.php/OWASP_Secure_Headers_Project#xcto
    #   https://en.wikipedia.org/wiki/Content_sniffing
    xcto = "nosniff"

    # X-Frame-Options (XFO)
    # Prevent Clickjacking
    #
    # Learn more:
    #   https://www.owasp.org/index.php/OWASP_Secure_Headers_Project#xfo
    #   https://www.keycdn.com/blog/x-frame-options/
    xfo = "SAMEORIGIN"

    # Referrer-Policy
    # This header governs which referrer information, sent in the Referer header, should
    # be included with requests made.
    # Referrer Policy has been a W3C Candidate Recommendation since 26 January 2017.
    #
    # Learn more:
    #   https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
    #   https://scotthelme.co.uk/a-new-security-header-referrer-policy/
    #   https://www.w3.org/TR/referrer-policy/
    rp = "no-referrer-when-downgrade"

    # Strict-Transport-Security (STS, aka HSTS)
    # Security feature that lets a web site tell browsers that it should only be communicated
    # with using HTTPS, instead of using HTTP.
    #
    # Learn more:
    #   https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet
    #   https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
    #
    # Note: Only applied to HTTPS(SSL) connection
    sts {
      # The time, in seconds, that the browser should remember that this site
      # is only to be accessed using HTTPS. Valid time units are
      # "s -> seconds", "m -> minutes", "h - hours".
      # Default value is 1 year in hours.
      max_age = "8760h"

      # If enabled the STS rule applies to all of the site's subdomains as well.
      # Default value is `false`.
      include_subdomains = true

      # Before enabling preload option, please read about pros and cons from above links.
      # Default value is `false`.
      preload = true
    }

    # Content-Security-Policy (CSP)
    # Provides a rich set of policy directives that enable fairly granular control
    # over the resources that a page is allowed. Prevents XSS risks.
    #
    # Learn more:
    #   https://content-security-policy.com/ (In-depth information and samples)
    #   https://developers.google.com/web/fundamentals/security/csp/
    #   https://www.owasp.org/index.php/OWASP_Secure_Headers_Project#csp
    #
    # Read above references and define your policy.
    csp {
      # Set of directives to govern the resources load on a page.
      directives = "default-src 'none'"

      # By default, violation reports aren't sent. To enable violation reporting,
      # you need to specify the report-uri policy directive.
      report_uri = "http://report.localhost"

      # Puts your `Content-Security-Policy` in report only mode, so that you can verify
      # and then set `csp_report_only` value to false.
      # Don't forget to set the `report-uri` for validation.
      report_only = true
    }

    # Public-Key-Pins PKP (aka HPKP)
    # This header prevents the Man-in-the-Middle Attack (MITM) with forged certificates.
    #
    # Learn more:
    #   https://scotthelme.co.uk/hpkp-http-public-key-pinning/
    #   https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning
    # Read above references and define your keys.
    #
    # Note:
    #   - HPKP has the potential to lock out users for a long time if used incorrectly!
    #     The use of backup certificates and/or pinning the CA certificate is recommended.
    #   - Only applied to HTTPS(SSL) connection
    pkp {
      # The Base64 encoded Subject Public Key Information (SPKI) fingerprint.
      # These values gets added as `pin-sha256=<key1>; ...`.
      keys = [
        "X3pGTSOuJeEVw989IJ/cEtXUEmy52zs1TZQrU06KUKg=",
        "MHJYVThihUrJcxW6wcqyOISTXIsInsdj3xK8QrZbHec=",
        "GGekerhihUrJcxW6wcqyOISTXIsInsdj3xK8QrZbHec=",
      ]

      # The time that the browser should remember that this site is only to be
      # accessed using one of the defined keys.
      # Valid time units are "s -> seconds", "m -> minutes", "h - hours".
      max_age = "720h"

      # If enabled the PKP keys applies to all of the site's subdomains as well.
      # Default value is `false`.
      include_subdomains = true

      # By default, Pin validation failure reports aren't sent. To enable Pin validation
      # failure reporting, you need to specify the report-uri.
      report_uri = "http://report.localhost"

      # Puts your `Public-Key-Pins` in report only mode, so that you can verify
      # and then set `pkp_report_only` value to false.
      # Don't forget to set the `report-uri` for validation.
      report_only = true
    }

    # X-Permitted-Cross-Domain-Policies
    # Restrict Adobe Flash Player's or PDF documents access via crossdomain.xml,
    # and this header.
    #
    # Learn more:
    #   https://www.owasp.org/index.php/OWASP_Secure_Headers_Project#xpcdp
    #   https://www.adobe.com/devnet/adobe-media-server/articles/cross-domain-xml-for-streaming.html
    xpcdp = "master-only"
  }
}
